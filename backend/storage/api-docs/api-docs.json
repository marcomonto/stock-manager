{
    "openapi": "3.0.0",
    "info": {
        "title": "Stock Manager API",
        "description": "Service for handling stock products and orders",
        "version": "1.0.0"
    },
    "paths": {
        "/api/orders": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "List orders with optional filtering and pagination",
                "description": "Retrieve a list of orders with optional filters for name, description, creation date and pagination support",
                "operationId": "listOrders",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ListOrdersPage"
                    },
                    {
                        "$ref": "#/components/parameters/ListOrdersRowsPerPage"
                    },
                    {
                        "$ref": "#/components/parameters/ListOrdersName"
                    },
                    {
                        "$ref": "#/components/parameters/ListOrdersDescription"
                    },
                    {
                        "$ref": "#/components/parameters/ListOrdersCreationDate"
                    },
                    {
                        "$ref": "#/components/parameters/ListOrdersWithDetails"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of orders retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Array of orders",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrderResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Orders"
                ],
                "summary": "Create a new order",
                "description": "Create a new order with the specified products and quantities. Stock quantities will be decremented automatically.",
                "operationId": "createOrder",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrderRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Empty response body on successful creation",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "422": {
                        "$ref": "#/components/responses/InvalidArgument"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                }
            }
        },
        "/api/orders/{orderId}": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get a specific order by ID",
                "description": "Retrieve detailed information about a specific order using its unique identifier",
                "operationId": "findOrder",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/FindOrderId"
                    },
                    {
                        "$ref": "#/components/parameters/FindOrderWithDetails"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Order not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                }
            },
            "put": {
                "tags": [
                    "Orders"
                ],
                "summary": "Update an existing order",
                "description": "Update an existing order with new products, quantities, name or description. Stock quantities will be adjusted automatically based on the changes.",
                "operationId": "updateOrder",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/UpdateOrderId"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOrderRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Order updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Empty response body on successful update",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "422": {
                        "$ref": "#/components/responses/InvalidArgument"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Orders"
                ],
                "summary": "Delete an order",
                "description": "Delete an order and restore the product stock quantities. The order status will be set to 'cancelled' and the order will be soft deleted.",
                "operationId": "deleteOrder",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/DeleteOrderId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Empty response body on successful deletion",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "422": {
                        "$ref": "#/components/responses/InvalidArgument"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "OrderResponse": {
                "properties": {
                    "id": {
                        "description": "Order unique identifier",
                        "type": "string",
                        "format": "ulid",
                        "example": "01HV5R2K3M4N5P6Q7R8S9T0U1V"
                    },
                    "name": {
                        "description": "Order name",
                        "type": "string",
                        "example": "Urgent delivery"
                    },
                    "description": {
                        "description": "Order description",
                        "type": "string",
                        "example": "Order for Mr.Rossi in Catanzaro"
                    },
                    "status": {
                        "description": "Current order status",
                        "type": "string",
                        "enum": [
                            "pending",
                            "processing",
                            "shipped",
                            "delivered",
                            "cancelled"
                        ],
                        "example": "pending"
                    },
                    "createdAt": {
                        "description": "Order creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-01-15T10:30:00Z"
                    },
                    "updatedAt": {
                        "description": "Order last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-01-15T15:45:00Z"
                    },
                    "orderItems": {
                        "description": "Order items (included when withDetails=true)",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderItemResponse"
                        }
                    }
                },
                "type": "object"
            },
            "OrderItemResponse": {
                "properties": {
                    "name": {
                        "description": "Product name",
                        "type": "string",
                        "example": "Premium Widget"
                    },
                    "quantity": {
                        "description": "Quantity ordered",
                        "type": "integer",
                        "minimum": 1,
                        "example": 2
                    },
                    "createdAt": {
                        "description": "Order item creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-01-15T10:30:00Z"
                    },
                    "updatedAt": {
                        "description": "Order item last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-01-15T10:30:00Z"
                    }
                },
                "type": "object"
            },
            "CreateOrderRequest": {
                "required": [
                    "orderItems",
                    "name",
                    "description"
                ],
                "properties": {
                    "orderItems": {
                        "description": "Array of order items, each containing product ID and quantity",
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {
                                        "description": "Product ULID",
                                        "type": "string",
                                        "format": "ulid"
                                    },
                                    {
                                        "description": "Quantity",
                                        "type": "integer",
                                        "minimum": 1
                                    }
                                ]
                            },
                            "maxItems": 2,
                            "minItems": 2
                        },
                        "example": [
                            [
                                "01HV5R2K3M4N5P6Q7R8S9T0U1V",
                                2
                            ],
                            [
                                "01HW6S3L4N5O6P7Q8R9S0T1U2W",
                                1
                            ]
                        ]
                    },
                    "name": {
                        "description": "Name for the order",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Urgent delivery"
                    },
                    "description": {
                        "description": "Description for the order",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Order for Mr.Rossi in Catanzaro"
                    }
                },
                "type": "object"
            },
            "UpdateOrderRequest": {
                "required": [
                    "orderItems",
                    "name",
                    "description"
                ],
                "properties": {
                    "orderItems": {
                        "description": "Array of order items, each containing product ID and quantity",
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {
                                        "description": "Product ULID",
                                        "type": "string",
                                        "format": "ulid"
                                    },
                                    {
                                        "description": "Quantity",
                                        "type": "integer",
                                        "minimum": 1
                                    }
                                ]
                            },
                            "maxItems": 2,
                            "minItems": 2
                        },
                        "example": [
                            [
                                "01HV5R2K3M4N5P6Q7R8S9T0U1V",
                                3
                            ],
                            [
                                "01HW6S3L4N5O6P7Q8R9S0T1U2W",
                                2
                            ]
                        ]
                    },
                    "name": {
                        "description": "Updated name for the order",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Updated delivery"
                    },
                    "description": {
                        "description": "Updated description for the order",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Updated order for Mr.Rossi in Catanzaro"
                    }
                },
                "type": "object"
            }
        },
        "responses": {
            "ValidationError": {
                "description": "Validation error",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "The given data was invalid"
                                },
                                "error": {
                                    "description": "Detailed validation errors",
                                    "type": "object"
                                },
                                "type": {
                                    "type": "string",
                                    "example": "validation_error"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "InvalidArgument": {
                "description": "Invalid argument provided",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Invalid argument provided"
                                },
                                "error": {
                                    "type": "string",
                                    "example": "Product with ID 01HV5R2K3M4N5P6Q7R8S9T0U1V not found"
                                },
                                "type": {
                                    "type": "string",
                                    "example": "invalid_argument"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "ServerError": {
                "description": "Internal server error",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Internal server error"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            }
        },
        "parameters": {
            "DeleteOrderId": {
                "name": "orderId",
                "in": "path",
                "description": "The unique identifier of the order to delete",
                "required": true,
                "schema": {
                    "type": "string",
                    "format": "ulid",
                    "example": "01HV5R2K3M4N5P6Q7R8S9T0U1V"
                }
            },
            "FindOrderId": {
                "name": "orderId",
                "in": "path",
                "description": "The unique identifier of the order",
                "required": true,
                "schema": {
                    "type": "string",
                    "format": "ulid",
                    "example": "01HV5R2K3M4N5P6Q7R8S9T0U1V"
                }
            },
            "FindOrderWithDetails": {
                "name": "withDetails",
                "in": "query",
                "description": "Include detailed order information with related items",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "enum": [
                        true,
                        false
                    ],
                    "example": true
                }
            },
            "ListOrdersPage": {
                "name": "page",
                "in": "query",
                "description": "Page number for pagination",
                "required": true,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                }
            },
            "ListOrdersRowsPerPage": {
                "name": "rowsPerPage",
                "in": "query",
                "description": "Number of items per page",
                "required": true,
                "schema": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1,
                    "example": 10
                }
            },
            "ListOrdersName": {
                "name": "name",
                "in": "query",
                "description": "Filter orders by name (partial match)",
                "required": false,
                "schema": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Urgent delivery"
                }
            },
            "ListOrdersDescription": {
                "name": "description",
                "in": "query",
                "description": "Filter orders by description (partial match)",
                "required": false,
                "schema": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Mr.Rossi"
                }
            },
            "ListOrdersCreationDate": {
                "name": "creationDate",
                "in": "query",
                "description": "Filter orders by creation date",
                "required": false,
                "schema": {
                    "type": "string",
                    "format": "date",
                    "example": "2024-01-15"
                }
            },
            "ListOrdersWithDetails": {
                "name": "withDetails",
                "in": "query",
                "description": "Include detailed order information",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "example": true
                }
            },
            "UpdateOrderId": {
                "name": "orderId",
                "in": "path",
                "description": "The unique identifier of the order to update",
                "required": true,
                "schema": {
                    "type": "string",
                    "format": "ulid",
                    "example": "01HV5R2K3M4N5P6Q7R8S9T0U1V"
                }
            }
        }
    },
    "tags": [
        {
            "name": "Orders",
            "description": "Orders API"
        }
    ]
}